{"version":3,"file":"node-request.cjs","sources":["../../src/middleware/defaultOptionsProcessor.ts","../../src/middleware/defaultOptionsValidator.ts","../../src/util/lowerCaseHeaders.ts","../../src/request/node/proxy.ts","../../src/request/node/tunnel.ts","../../src/request/node-request.ts","../../src/request/node/simpleConcat.ts","../../src/request/node/timedOut.ts"],"sourcesContent":["import type {MiddlewareHooks, RequestOptions} from 'get-it'\n\nconst isReactNative = typeof navigator === 'undefined' ? false : navigator.product === 'ReactNative'\n\nconst defaultOptions = {timeout: isReactNative ? 60000 : 120000} satisfies Partial<RequestOptions>\n\n/** @public */\nexport const processOptions = function processOptions(opts) {\n  const options = {\n    ...defaultOptions,\n    ...(typeof opts === 'string' ? {url: opts} : opts),\n  } satisfies RequestOptions\n\n  // Normalize timeouts\n  options.timeout = normalizeTimeout(options.timeout)\n\n  // Shallow-merge (override) existing query params\n  if (options.query) {\n    const {url, searchParams} = splitUrl(options.url)\n\n    for (const [key, value] of Object.entries(options.query)) {\n      if (value !== undefined) {\n        if (Array.isArray(value)) {\n          for (const v of value) {\n            searchParams.append(key, v as string)\n          }\n        } else {\n          searchParams.append(key, value as string)\n        }\n      }\n\n      // Merge back params into url\n      const search = searchParams.toString()\n      if (search) {\n        options.url = `${url}?${search}`\n      }\n    }\n  }\n\n  // Implicit POST if we have not specified a method but have a body\n  options.method =\n    options.body && !options.method ? 'POST' : (options.method || 'GET').toUpperCase()\n\n  return options\n} satisfies MiddlewareHooks['processOptions']\n\n/**\n * Given a string URL, extracts the query string and URL from each other, and returns them.\n * Note that we cannot use the `URL` constructor because of old React Native versions which are\n * majorly broken and returns incorrect results:\n *\n * (`new URL('http://foo/?a=b').toString()` == 'http://foo/?a=b/')\n */\nfunction splitUrl(url: string): {url: string; searchParams: URLSearchParams} {\n  const qIndex = url.indexOf('?')\n  if (qIndex === -1) {\n    return {url, searchParams: new URLSearchParams()}\n  }\n\n  const base = url.slice(0, qIndex)\n  const qs = url.slice(qIndex + 1)\n\n  // React Native's URL and URLSearchParams are broken, so passing a string to URLSearchParams\n  // does not work, leading to an empty query string. For other environments, this should be enough\n  if (!isReactNative) {\n    return {url: base, searchParams: new URLSearchParams(qs)}\n  }\n\n  // Sanity-check; we do not know of any environment where this is the case,\n  // but if it is, we should not proceed without giving a descriptive error\n  if (typeof decodeURIComponent !== 'function') {\n    throw new Error(\n      'Broken `URLSearchParams` implementation, and `decodeURIComponent` is not defined',\n    )\n  }\n\n  const params = new URLSearchParams()\n  for (const pair of qs.split('&')) {\n    const [key, value] = pair.split('=')\n    if (key) {\n      params.append(decodeQueryParam(key), decodeQueryParam(value || ''))\n    }\n  }\n\n  return {url: base, searchParams: params}\n}\n\nfunction decodeQueryParam(value: string): string {\n  return decodeURIComponent(value.replace(/\\+/g, ' '))\n}\n\nfunction normalizeTimeout(time: RequestOptions['timeout']) {\n  if (time === false || time === 0) {\n    return false\n  }\n\n  if (time.connect || time.socket) {\n    return time\n  }\n\n  const delay = Number(time)\n  if (isNaN(delay)) {\n    return normalizeTimeout(defaultOptions.timeout)\n  }\n\n  return {connect: delay, socket: delay}\n}\n","import type {MiddlewareHooks} from 'get-it'\n\nconst validUrl = /^https?:\\/\\//i\n\n/** @public */\nexport const validateOptions = function validateOptions(options) {\n  if (!validUrl.test(options.url)) {\n    throw new Error(`\"${options.url}\" is not a valid URL`)\n  }\n} satisfies MiddlewareHooks['validateOptions']\n","export function lowerCaseHeaders(headers: any) {\n  return Object.keys(headers || {}).reduce((acc, header) => {\n    acc[header.toLowerCase()] = headers[header]\n    return acc\n  }, {} as any)\n}\n","/**\n * Code borrowed from https://github.com/request/request\n * Apache License 2.0\n */\n\nimport url from 'url'\n\nfunction formatHostname(hostname: string) {\n  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n  return hostname.replace(/^\\.*/, '.').toLowerCase()\n}\n\nfunction parseNoProxyZone(zoneStr: string) {\n  const zone = zoneStr.trim().toLowerCase()\n\n  const zoneParts = zone.split(':', 2)\n  const zoneHost = formatHostname(zoneParts[0])\n  const zonePort = zoneParts[1]\n  const hasPort = zone.indexOf(':') > -1\n\n  return {hostname: zoneHost, port: zonePort, hasPort: hasPort}\n}\n\nfunction uriInNoProxy(uri: any, noProxy: any) {\n  const port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n  const hostname = formatHostname(uri.hostname)\n  const noProxyList = noProxy.split(',')\n\n  // iterate through the noProxyList until it finds a match.\n  return noProxyList.map(parseNoProxyZone).some((noProxyZone: any) => {\n    const isMatchedAt = hostname.indexOf(noProxyZone.hostname)\n    const hostnameMatched =\n      isMatchedAt > -1 && isMatchedAt === hostname.length - noProxyZone.hostname.length\n\n    if (noProxyZone.hasPort) {\n      return port === noProxyZone.port && hostnameMatched\n    }\n\n    return hostnameMatched\n  })\n}\n\nfunction getProxyFromUri(uri: any) {\n  // Decide the proper request proxy to use based on the request URI object and the\n  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n  // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)\n  const noProxy = process.env['NO_PROXY'] || process.env['no_proxy'] || ''\n\n  // if the noProxy is a wildcard then return null\n  if (noProxy === '*') {\n    return null\n  }\n\n  // if the noProxy is not empty and the uri is found return null\n  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {\n    return null\n  }\n\n  // Check for HTTP or HTTPS Proxy in environment, else default to null\n  if (uri.protocol === 'http:') {\n    return process.env['HTTP_PROXY'] || process.env['http_proxy'] || null\n  }\n\n  if (uri.protocol === 'https:') {\n    return (\n      process.env['HTTPS_PROXY'] ||\n      process.env['https_proxy'] ||\n      process.env['HTTP_PROXY'] ||\n      process.env['http_proxy'] ||\n      null\n    )\n  }\n\n  // if none of that works, return null\n  // (What uri protocol are you using then?)\n  return null\n}\n\nfunction getHostFromUri(uri: any) {\n  let host = uri.host\n\n  // Drop :port suffix from Host header if known protocol.\n  if (uri.port) {\n    if (\n      (uri.port === '80' && uri.protocol === 'http:') ||\n      (uri.port === '443' && uri.protocol === 'https:')\n    ) {\n      host = uri.hostname\n    }\n  }\n\n  return host\n}\n\nfunction getHostHeaderWithPort(uri: any) {\n  const port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n  return `${uri.hostname}:${port}`\n}\n\nexport function rewriteUriForProxy(reqOpts: any, uri: any, proxy: any) {\n  const headers = reqOpts.headers || {}\n  const options = Object.assign({}, reqOpts, {headers})\n  headers.host = headers.host || getHostHeaderWithPort(uri)\n  options.protocol = proxy.protocol || options.protocol\n  options.hostname = proxy.host.replace(/:\\d+/, '')\n  options.port = proxy.port\n  options.host = getHostFromUri(Object.assign({}, uri, proxy))\n  options.href = `${options.protocol}//${options.host}${options.path}`\n  options.path = url.format(uri)\n  return options\n}\n\nexport function getProxyOptions(options: any) {\n  let proxy\n  // eslint-disable-next-line no-prototype-builtins\n  if (options.hasOwnProperty('proxy')) {\n    proxy = options.proxy\n  } else {\n    const uri = url.parse(options.url)\n    proxy = getProxyFromUri(uri)\n  }\n\n  return typeof proxy === 'string' ? url.parse(proxy) : proxy\n}\n","/**\n * Code borrowed from https://github.com/request/request\n * Modified to be less request-specific, more functional\n * Apache License 2.0\n */\nimport * as tunnel from 'tunnel-agent'\nimport url from 'url'\n\nconst uriParts = [\n  'protocol',\n  'slashes',\n  'auth',\n  'host',\n  'port',\n  'hostname',\n  'hash',\n  'search',\n  'query',\n  'pathname',\n  'path',\n  'href',\n]\n\nconst defaultProxyHeaderWhiteList = [\n  'accept',\n  'accept-charset',\n  'accept-encoding',\n  'accept-language',\n  'accept-ranges',\n  'cache-control',\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-md5',\n  'content-range',\n  'content-type',\n  'connection',\n  'date',\n  'expect',\n  'max-forwards',\n  'pragma',\n  'referer',\n  'te',\n  'user-agent',\n  'via',\n]\n\nconst defaultProxyHeaderExclusiveList = ['proxy-authorization']\n\nexport function shouldEnable(options: any) {\n  // Tunnel HTTPS by default. Allow the user to override this setting.\n\n  // If user has specified a specific tunnel override...\n  if (typeof options.tunnel !== 'undefined') {\n    return Boolean(options.tunnel)\n  }\n\n  // If the destination is HTTPS, tunnel.\n  const uri = url.parse(options.url)\n  if (uri.protocol === 'https:') {\n    return true\n  }\n\n  // Otherwise, do not use tunnel.\n  return false\n}\n\nexport function applyAgent(opts: any = {}, proxy: any) {\n  const options = Object.assign({}, opts)\n\n  // Setup proxy header exclusive list and whitelist\n  const proxyHeaderWhiteList = defaultProxyHeaderWhiteList\n    .concat(options.proxyHeaderWhiteList || [])\n    .map((header) => header.toLowerCase())\n\n  const proxyHeaderExclusiveList = defaultProxyHeaderExclusiveList\n    .concat(options.proxyHeaderExclusiveList || [])\n    .map((header) => header.toLowerCase())\n\n  // Get the headers we should send to the proxy\n  const proxyHeaders = getAllowedProxyHeaders(options.headers, proxyHeaderWhiteList)\n  proxyHeaders.host = constructProxyHost(options)\n\n  // Reduce headers to the ones not exclusive for the proxy\n  options.headers = Object.keys(options.headers || {}).reduce((headers, header) => {\n    const isAllowed = proxyHeaderExclusiveList.indexOf(header.toLowerCase()) === -1\n    if (isAllowed) {\n      headers[header] = options.headers[header]\n    }\n\n    return headers\n  }, {} as any)\n\n  const tunnelFn = getTunnelFn(options, proxy)\n  const tunnelOptions = constructTunnelOptions(options, proxy, proxyHeaders)\n  options.agent = tunnelFn(tunnelOptions)\n\n  return options\n}\n\nfunction getTunnelFn(options: any, proxy: any) {\n  const uri = getUriParts(options)\n  const tunnelFnName = constructTunnelFnName(uri, proxy)\n  return tunnel[tunnelFnName]\n}\n\nfunction getUriParts(options: any) {\n  return uriParts.reduce((uri, part) => {\n    uri[part] = options[part]\n    return uri\n  }, {} as any)\n}\n\ntype UriProtocol = `http` | `https`\ntype ProxyProtocol = `Http` | `Https`\nfunction constructTunnelFnName(uri: any, proxy: any): `${UriProtocol}Over${ProxyProtocol}` {\n  const uriProtocol = uri.protocol === 'https:' ? 'https' : 'http'\n  const proxyProtocol = proxy.protocol === 'https:' ? 'Https' : 'Http'\n  return `${uriProtocol}Over${proxyProtocol}`\n}\n\nfunction constructProxyHost(uri: any) {\n  const port = uri.port\n  const protocol = uri.protocol\n  let proxyHost = `${uri.hostname}:`\n\n  if (port) {\n    proxyHost += port\n  } else if (protocol === 'https:') {\n    proxyHost += '443'\n  } else {\n    proxyHost += '80'\n  }\n\n  return proxyHost\n}\n\nfunction getAllowedProxyHeaders(headers: any, whiteList: any): any {\n  return Object.keys(headers)\n    .filter((header) => whiteList.indexOf(header.toLowerCase()) !== -1)\n    .reduce((set: any, header: any) => {\n      set[header] = headers[header]\n      return set\n    }, {})\n}\n\nfunction constructTunnelOptions(options: any, proxy: any, proxyHeaders: any) {\n  return {\n    proxy: {\n      host: proxy.hostname,\n      port: +proxy.port,\n      proxyAuth: proxy.auth,\n      headers: proxyHeaders,\n    },\n    headers: options.headers,\n    ca: options.ca,\n    cert: options.cert,\n    key: options.key,\n    passphrase: options.passphrase,\n    pfx: options.pfx,\n    ciphers: options.ciphers,\n    rejectUnauthorized: options.rejectUnauthorized,\n    secureOptions: options.secureOptions,\n    secureProtocol: options.secureProtocol,\n  }\n}\n","import decompressResponse from 'decompress-response'\nimport follow, {type FollowResponse, type RedirectableRequest} from 'follow-redirects'\nimport type {FinalizeNodeOptionsPayload, HttpRequest, MiddlewareResponse} from 'get-it'\nimport http from 'http'\nimport https from 'https'\nimport progressStream from 'progress-stream'\nimport qs from 'querystring'\nimport {Readable, type Stream} from 'stream'\nimport url from 'url'\n\nimport {lowerCaseHeaders} from '../util/lowerCaseHeaders'\nimport {getProxyOptions, rewriteUriForProxy} from './node/proxy'\nimport {concat} from './node/simpleConcat'\nimport {timedOut} from './node/timedOut'\nimport * as tunneling from './node/tunnel'\n\n/**\n * Taken from:\n * https://github.com/sindresorhus/is-stream/blob/fb8caed475b4107cee3c22be3252a904020eb2d4/index.js#L3-L6\n */\nconst isStream = (stream: any): stream is Stream =>\n  stream !== null && typeof stream === 'object' && typeof stream.pipe === 'function'\n\n/** @public */\nexport const adapter = 'node' satisfies import('../types').RequestAdapter\n\nexport class NodeRequestError extends Error {\n  request: http.ClientRequest\n  code?: string | undefined\n\n  constructor(err: NodeJS.ErrnoException, req: any) {\n    super(err.message)\n    this.request = req\n    this.code = err.code\n  }\n}\n\n// Reduce a fully fledged node-style response object to\n// something that works in both browser and node environment\nconst reduceResponse = (\n  res: any,\n  reqUrl: string,\n  method: string,\n  body: any,\n): MiddlewareResponse => ({\n  body,\n  url: reqUrl,\n  method: method,\n  headers: res.headers,\n  statusCode: res.statusCode,\n  statusMessage: res.statusMessage,\n})\n\nexport const httpRequester: HttpRequest = (context, cb) => {\n  const {options} = context\n  const uri = Object.assign({}, url.parse(options.url))\n\n  if (typeof fetch === 'function' && options.fetch) {\n    const controller = new AbortController()\n    const reqOpts = context.applyMiddleware('finalizeOptions', {\n      ...uri,\n      method: options.method,\n      headers: {\n        ...(typeof options.fetch === 'object' && options.fetch.headers\n          ? lowerCaseHeaders(options.fetch.headers)\n          : {}),\n        ...lowerCaseHeaders(options.headers),\n      },\n      maxRedirects: options.maxRedirects,\n    }) as FinalizeNodeOptionsPayload\n    const fetchOpts = {\n      credentials: options.withCredentials ? 'include' : 'omit',\n      ...(typeof options.fetch === 'object' ? options.fetch : {}),\n      method: reqOpts.method,\n      headers: reqOpts.headers,\n      body: options.body,\n      signal: controller.signal,\n    } satisfies RequestInit\n\n    // Allow middleware to inject a response, for instance in the case of caching or mocking\n    const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n      adapter,\n      context,\n    })\n\n    // If middleware injected a response, treat it as we normally would and return it\n    // Do note that the injected response has to be reduced to a cross-environment friendly response\n    if (injectedResponse) {\n      const cbTimer = setTimeout(cb, 0, null, injectedResponse)\n      const cancel = () => clearTimeout(cbTimer)\n      return {abort: cancel}\n    }\n\n    const request = fetch(options.url, fetchOpts)\n\n    // Let middleware know we're about to do a request\n    context.applyMiddleware('onRequest', {options, adapter, request, context})\n\n    request\n      .then(async (res) => {\n        const body = options.rawBody ? res.body : await res.text()\n\n        const headers = {} as Record<string, string>\n        res.headers.forEach((value, key) => {\n          headers[key] = value\n        })\n\n        cb(null, {\n          body,\n          url: res.url,\n          method: options.method!,\n          headers,\n          statusCode: res.status,\n          statusMessage: res.statusText,\n        })\n      })\n      .catch((err) => {\n        if (err.name == 'AbortError') return\n        cb(err)\n      })\n\n    return {abort: () => controller.abort()}\n  }\n\n  const bodyType = isStream(options.body) ? 'stream' : typeof options.body\n  if (\n    bodyType !== 'undefined' &&\n    bodyType !== 'stream' &&\n    bodyType !== 'string' &&\n    !Buffer.isBuffer(options.body)\n  ) {\n    throw new Error(`Request body must be a string, buffer or stream, got ${bodyType}`)\n  }\n\n  const lengthHeader: any = {}\n  if (options.bodySize) {\n    lengthHeader['content-length'] = options.bodySize\n  } else if (options.body && bodyType !== 'stream') {\n    lengthHeader['content-length'] = Buffer.byteLength(options.body)\n  }\n\n  // Make sure callback is not called in the event of a cancellation\n  let aborted = false\n  const callback = (err: Error | null, res?: MiddlewareResponse) => !aborted && cb(err, res)\n  context.channels.abort.subscribe(() => {\n    aborted = true\n  })\n\n  // Create a reduced subset of options meant for the http.request() method\n  let reqOpts: any = Object.assign({}, uri, {\n    method: options.method,\n    headers: Object.assign({}, lowerCaseHeaders(options.headers), lengthHeader),\n    maxRedirects: options.maxRedirects,\n  })\n\n  // Figure out proxying/tunnel options\n  const proxy = getProxyOptions(options)\n  const tunnel = proxy && tunneling.shouldEnable(options)\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context,\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setImmediate(callback, null, injectedResponse)\n    const abort = () => clearImmediate(cbTimer)\n    return {abort}\n  }\n\n  // We're using the follow-redirects module to transparently follow redirects\n  if (options.maxRedirects !== 0) {\n    reqOpts.maxRedirects = options.maxRedirects || 5\n  }\n\n  // Apply currect options for proxy tunneling, if enabled\n  if (proxy && tunnel) {\n    reqOpts = tunneling.applyAgent(reqOpts, proxy)\n  } else if (proxy && !tunnel) {\n    reqOpts = rewriteUriForProxy(reqOpts, uri, proxy)\n  }\n\n  // Handle proxy authorization if present\n  if (!tunnel && proxy && proxy.auth && !reqOpts.headers['proxy-authorization']) {\n    const [username, password] = proxy.auth.username\n      ? [proxy.auth.username, proxy.auth.password]\n      : proxy.auth.split(':').map((item: any) => qs.unescape(item))\n\n    const auth = Buffer.from(`${username}:${password}`, 'utf8')\n    const authBase64 = auth.toString('base64')\n    reqOpts.headers['proxy-authorization'] = `Basic ${authBase64}`\n  }\n\n  // Figure out transport (http/https, forwarding/non-forwarding agent)\n  const transport = getRequestTransport(reqOpts, proxy, tunnel)\n  if (typeof options.debug === 'function' && proxy) {\n    options.debug(\n      'Proxying using %s',\n      reqOpts.agent ? 'tunnel agent' : `${reqOpts.host}:${reqOpts.port}`,\n    )\n  }\n\n  // See if we should try to request a compressed response (and decompress on return)\n  const tryCompressed = reqOpts.method !== 'HEAD'\n  if (tryCompressed && !reqOpts.headers['accept-encoding'] && options.compress !== false) {\n    reqOpts.headers['accept-encoding'] =\n      // Workaround Bun not supporting brotli: https://github.com/oven-sh/bun/issues/267\n      typeof Bun !== 'undefined' ? 'gzip, deflate' : 'br, gzip, deflate'\n  }\n\n  let _res: http.IncomingMessage | undefined\n  const finalOptions = context.applyMiddleware(\n    'finalizeOptions',\n    reqOpts,\n  ) as FinalizeNodeOptionsPayload\n  const request = transport.request(finalOptions, (response) => {\n    const res = tryCompressed ? decompressResponse(response) : response\n    _res = res\n    const resStream = context.applyMiddleware('onHeaders', res, {\n      headers: response.headers,\n      adapter,\n      context,\n    })\n\n    // On redirects, `responseUrl` is set\n    const reqUrl = 'responseUrl' in response ? response.responseUrl : options.url\n\n    if (options.stream) {\n      callback(null, reduceResponse(res, reqUrl, reqOpts.method, resStream))\n      return\n    }\n\n    // Concatenate the response body, then parse the response with middlewares\n    concat(resStream, (err: any, data: any) => {\n      if (err) {\n        return callback(err)\n      }\n\n      const body = options.rawBody ? data : data.toString()\n      const reduced = reduceResponse(res, reqUrl, reqOpts.method, body)\n      return callback(null, reduced)\n    })\n  })\n\n  function onError(err: NodeJS.ErrnoException) {\n    // HACK: If we have a socket error, and response has already been assigned this means\n    // that a response has already been sent. According to node.js docs, this is\n    // will result in the response erroring with an error code of 'ECONNRESET'.\n    // We first destroy the response, then the request, with the same error. This way the\n    // error is forwarded to both the response and the request.\n    // See the event order outlined here https://nodejs.org/api/http.html#httprequesturl-options-callback for how node.js handles the different scenarios.\n    if (_res) _res.destroy(err)\n    request.destroy(err)\n  }\n\n  request.once('socket', (socket: NodeJS.Socket) => {\n    socket.once('error', onError)\n    request.once('response', (response) => {\n      response.once('end', () => {\n        socket.removeListener('error', onError)\n      })\n    })\n  })\n\n  request.once('error', (err: NodeJS.ErrnoException) => {\n    if (_res) return\n    // The callback has already been invoked. Any error should be sent to the response.\n    callback(new NodeRequestError(err, request))\n  })\n\n  if (options.timeout) {\n    timedOut(request, options.timeout)\n  }\n\n  // Cheating a bit here; since we're not concerned about the \"bundle size\" in node,\n  // and modifying the body stream would be sorta tricky, we're just always going\n  // to put a progress stream in the middle here. Note that\n  const {bodyStream, progress} = getProgressStream(options)\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request, context, progress})\n\n  if (bodyStream) {\n    bodyStream.pipe(request)\n  } else {\n    request.end(options.body)\n  }\n\n  return {abort: () => request.abort()}\n}\n\nfunction getProgressStream(options: any) {\n  if (!options.body) {\n    return {}\n  }\n\n  const bodyIsStream = isStream(options.body)\n  const length = options.bodySize || (bodyIsStream ? null : Buffer.byteLength(options.body))\n  if (!length) {\n    return bodyIsStream ? {bodyStream: options.body} : {}\n  }\n\n  const progress = progressStream({time: 16, length})\n  const bodyStream = bodyIsStream ? options.body : Readable.from(options.body)\n  return {bodyStream: bodyStream.pipe(progress), progress}\n}\n\nfunction getRequestTransport(\n  reqOpts: any,\n  proxy: any,\n  tunnel: any,\n): {\n  request: (\n    options: any,\n    callback: (response: http.IncomingMessage | (http.IncomingMessage & FollowResponse)) => void,\n  ) => http.ClientRequest | RedirectableRequest<http.ClientRequest, http.IncomingMessage>\n} {\n  const isHttpsRequest = reqOpts.protocol === 'https:'\n  const transports =\n    reqOpts.maxRedirects === 0\n      ? {http: http, https: https}\n      : {http: follow.http, https: follow.https}\n\n  if (!proxy || tunnel) {\n    return isHttpsRequest ? transports.https : transports.http\n  }\n\n  // Assume the proxy is an HTTPS proxy if port is 443, or if there is a\n  // `protocol` option set that starts with https\n  let isHttpsProxy = proxy.port === 443\n  if (proxy.protocol) {\n    isHttpsProxy = /^https:?/.test(proxy.protocol)\n  }\n\n  return isHttpsProxy ? transports.https : transports.http\n}\n","/*! simple-concat. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexport function concat(stream: any, cb: any) {\n  const chunks: any = []\n  stream.on('data', function (chunk: any) {\n    chunks.push(chunk)\n  })\n  stream.once('end', function () {\n    if (cb) cb(null, Buffer.concat(chunks))\n    cb = null\n  })\n  stream.once('error', function (err: any) {\n    if (cb) cb(err)\n    cb = null\n  })\n}\n","// Copied from `@sanity/timed-out`\n\nimport type {IncomingMessage} from 'node:http'\nimport type {Socket} from 'node:net'\n\nexport function timedOut(req: any, time: any) {\n  if (req.timeoutTimer) {\n    return req\n  }\n\n  const delays = isNaN(time) ? time : {socket: time, connect: time}\n  const hostHeader = req.getHeader('host')\n  const host = hostHeader ? ' to ' + hostHeader : ''\n\n  if (delays.connect !== undefined) {\n    req.timeoutTimer = setTimeout(function timeoutHandler() {\n      const e: NodeJS.ErrnoException = new Error('Connection timed out on request' + host)\n      e.code = 'ETIMEDOUT'\n      req.destroy(e)\n    }, delays.connect)\n  }\n\n  // Clear the connection timeout timer once a socket is assigned to the\n  // request and is connected.\n  req.on('socket', function assign(socket: Socket) {\n    // Socket may come from Agent pool and may be already connected.\n    if (!socket.connecting) {\n      connect(socket)\n      return\n    }\n\n    socket.once('connect', () => connect(socket))\n  })\n\n  function clear() {\n    if (req.timeoutTimer) {\n      clearTimeout(req.timeoutTimer)\n      req.timeoutTimer = null\n    }\n  }\n\n  function connect(socket: Socket) {\n    clear()\n\n    if (delays.socket !== undefined) {\n      const socketTimeoutHandler = () => {\n        const e: NodeJS.ErrnoException = new Error('Socket timed out on request' + host)\n        e.code = 'ESOCKETTIMEDOUT'\n        socket.destroy(e)\n      }\n\n      socket.setTimeout(delays.socket, socketTimeoutHandler)\n      req.once('response', (response: IncomingMessage) => {\n        response.once('end', () => {\n          socket.removeListener('timeout', socketTimeoutHandler)\n        })\n      })\n    }\n  }\n\n  return req.on('error', clear)\n}\n"],"names":["isReactNative","navigator","product","defaultOptions","timeout","decodeQueryParam","value","decodeURIComponent","replace","normalizeTimeout","time","connect","socket","delay","Number","isNaN","validUrl","lowerCaseHeaders","headers","Object","keys","reduce","acc","header","toLowerCase","formatHostname","hostname","parseNoProxyZone","zoneStr","zone","trim","zoneParts","split","port","hasPort","indexOf","getProxyFromUri","uri","noProxy","process","env","NO_PROXY","no_proxy","protocol","map","some","noProxyZone","isMatchedAt","hostnameMatched","length","uriInNoProxy","HTTP_PROXY","http_proxy","HTTPS_PROXY","https_proxy","uriParts","defaultProxyHeaderWhiteList","defaultProxyHeaderExclusiveList","applyAgent","opts","proxy","options","assign","proxyHeaderWhiteList","concat","proxyHeaderExclusiveList","proxyHeaders","whiteList","filter","set","host","proxyHost","constructProxyHost","tunnelFn","part","getUriParts","tunnelFnName","uriProtocol","proxyProtocol","constructTunnelFnName","tunnel","getTunnelFn","tunnelOptions","proxyAuth","auth","ca","cert","key","passphrase","pfx","ciphers","rejectUnauthorized","secureOptions","secureProtocol","constructTunnelOptions","agent","isStream","stream","pipe","adapter","NodeRequestError","Error","request","code","constructor","err","req","super","message","this","reduceResponse","res","reqUrl","method","body","url","statusCode","statusMessage","exports","N","a","h","context","cb","default","parse","fetch","controller","AbortController","reqOpts","applyMiddleware","maxRedirects","fetchOpts","credentials","withCredentials","signal","injectedResponse","cbTimer","setTimeout","abort","clearTimeout","then","async","rawBody","text","forEach","status","statusText","catch","name","bodyType","Buffer","isBuffer","lengthHeader","bodySize","byteLength","aborted","callback","channels","subscribe","hasOwnProperty","getProxyOptions","tunneling.shouldEnable","setImmediate","clearImmediate","tunneling.applyAgent","getHostHeaderWithPort","getHostFromUri","href","path","format","rewriteUriForProxy","username","password","item","qs","unescape","authBase64","from","toString","transport","isHttpsRequest","transports","http","https","follow","isHttpsProxy","test","getRequestTransport","debug","tryCompressed","_res","compress","Bun","finalOptions","response","decompressResponse","resStream","responseUrl","chunks","on","chunk","push","once","data","reduced","onError","destroy","removeListener","timeoutTimer","delays","hostHeader","getHeader","clear","socketTimeoutHandler","e","connecting","timedOut","bodyStream","progress","bodyIsStream","progressStream","Readable","getProgressStream","end","p","query","searchParams","qIndex","URLSearchParams","base","slice","params","pair","append","splitUrl","entries","Array","isArray","v","search","toUpperCase"],"mappings":"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"}